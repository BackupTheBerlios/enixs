#!/bin/sh

#----------------------------------------------------------------
# Test, if the script was started as root --> abort.
#----------------------------------------------------------------
id=`id | sed s/\(.*// | sed s/uid=//`

if [ "$id" = "0" ]; then
	echo "Dont start this script as root"
	exit 1
fi 

#----------------------------------------------------------------
# Set the path for dbmcli and xserver.
#----------------------------------------------------------------
export PATH=/opt/sapdb/indep_prog/bin:$PATH

#----------------------------------------------------------------
# Set the name of the database.
#----------------------------------------------------------------
SID=ENIXSDB

#----------------------------------------------------------------
# Start the communication server of the database.
#----------------------------------------------------------------
echo "Start communication server..."
x_server start >/dev/null 2>&1

#----------------------------------------------------------------
# Stop and drop an already existing database instance.
#----------------------------------------------------------------
echo "stop and drop existing $SID..."
dbmcli -d $SID -u dbm,dbm db_offline >/dev/null 2>&1
dbmcli -d $SID -u dbm,dbm db_drop >/dev/null 2>&1

#----------------------------------------------------------------
# Create the database instance.
#----------------------------------------------------------------
echo "Create database $SID..."
_o=`/opt/sapdb/depend/bin/dbmcli -s -R /opt/sapdb/depend db_create $SID dbm,dbm 2>&1`
_test=`echo $_o | grep OK`
if [ "$_test" = "" ]; then
	echo "create $SID failed: $_o"
	exit 1
fi

#----------------------------------------------------------------
# Create the directory for the database files.
#----------------------------------------------------------------
mkdir -p $HOME/$SID

#----------------------------------------------------------------
# Configure the database.
#----------------------------------------------------------------
echo "Set parameters for $SID..."
_o=`cat <<EOF | dbmcli -d $SID -u dbm,dbm 2>&1
param_rmfile
param_startsession
param_init OLTP
param_put LOG_MODE DUAL
param_put CAT_CACHE_SUPPLY 300
param_put DATA_CACHE 5000
param_put MAXDATADEVSPACES 1
param_put MAXDATAPAGES 64000
param_checkall
param_commitsession
param_adddevspace 1 SYS  $HOME/$SID/SYS01   F
param_adddevspace 1 DATA $HOME/$SID/DATA001 F 64000
param_adddevspace 1 LOG  $HOME/$SID/LOG001  F 64000
param_adddevspace 1 MLOG $HOME/$SID/MLOG001 F
quit
EOF`
_test=`echo $_o | grep OK`
if [ "$_test" = "" ]; then
        echo "Set parameters failed: $_o"
        exit 1
fi

#----------------------------------------------------------------
# Start the database.
#----------------------------------------------------------------
echo "Start $SID..."
_o=`dbmcli -d $SID -u dbm,dbm db_start 2>&1`
_test=`echo $_o | grep OK`
if [ "$_test" = "" ]; then
        echo "Start $SID failed: $_o"
        exit 1
fi

#----------------------------------------------------------------
# Initialize the database instance. 
#----------------------------------------------------------------
echo "Initializing $SID..."
_o=`cat <<EOF | dbmcli -d $SID -u dbm,dbm 2>&1
util_connect dbm,dbm
util_execute init config
util_activate dba,dba
quit
EOF`
_test=`echo $_o | grep OK`
if [ "$_test" = "" ]; then
        echo "Initialize $SID failed: $_o"
        exit 1
fi

#----------------------------------------------------------------
# Load the system tables.
#----------------------------------------------------------------
echo "Load system tables..."
_o=`dbmcli -d $SID -u dbm,dbm load_systab -u dba,dba -ud domain 2>&1`
_test=`echo $_o | grep OK`
if [ "$_test" = "" ]; then
        echo "Load system tables failed: $_o"
        exit 1
fi

#----------------------------------------------------------------
# Configure the backup parameters.
#----------------------------------------------------------------
echo "Set backup parameters..."
_o=`cat <<EOF | dbmcli -d $SID -u dbm,dbm 2>&1
backup_media_put data $HOME/$SID/datasave FILE DATA 0 8 YES
backup_media_put auto $HOME/$SID/autosave FILE AUTO
util_connect dbm,dbm
backup_save data
autosave_on
quit
EOF`
_test=`echo $_o | grep OK`
if [ "$_test" = "" ]; then
        echo "Set backup parameters failed: $_o"
        exit 1
fi


exit 0
